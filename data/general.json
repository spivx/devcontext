[
    {
        "id": "projectPriority",
        "question": "What is the main priority for this project?",
        "answers": [
            {
                "value": "maintainability",
                "label": "Maintainability",
                "example": "Prefer clarity and modularity over speed.",
                "isDefault": true
            },
            {
                "value": "speed",
                "label": "Speed of development",
                "example": "Use shortcuts and rapid prototyping practices."
            },
            {
                "value": "accessibility",
                "label": "Accessibility",
                "example": "Follow WCAG guidelines strictly.",
                "docs": "https://www.w3.org/WAI/standards-guidelines/wcag/"
            },
            {
                "value": "performance",
                "label": "Performance",
                "example": "Optimize code for runtime speed and bundle size."
            }
        ],
        "freeText": {
            "enabled": true,
            "suggestions": [
                "Developer velocity",
                "Long-term maintainability",
                "Regulatory compliance",
                "Performance-first roadmap"
            ]
        }
    },
    {
        "id": "codeStyle",
        "question": "Which code style guidelines should we follow?",
        "answers": [
            {
                "value": "airbnb",
                "label": "Airbnb JavaScript Style Guide",
                "example": "Follow https://github.com/airbnb/javascript",
                "docs": "https://github.com/airbnb/javascript",
                "isDefault": true
            },
            {
                "value": "standardjs",
                "label": "StandardJS",
                "example": "Use StandardJS (https://standardjs.com)",
                "docs": "https://standardjs.com/"
            },
            {
                "value": "custom",
                "label": "Custom team rules",
                "example": "See internal style guide."
            }
        ],
        "freeText": {
            "enabled": true,
            "suggestions": [
                "Google TypeScript style guide",
                "Internal lint rules",
                "Prettier defaults only",
                "Custom JavaScript guidelines"
            ]
        }
    },
    {
        "id": "variableNaming",
        "question": "What naming convention should be used for variables?",
        "answers": [
            {
                "value": "camelCase",
                "label": "camelCase",
                "example": "const userName = 'john'",
                "docs": "https://en.wikipedia.org/wiki/Camel_case",
                "isDefault": true
            },
            {
                "value": "snake_case",
                "label": "snake_case",
                "example": "const user_name = 'john'",
                "docs": "https://en.wikipedia.org/wiki/Snake_case"
            }
        ],
        "freeText": {
            "enabled": true,
            "suggestions": [
                "camelCase with descriptive names",
                "snake_case for shared libs",
                "Prefix booleans with is/has",
                "No abbreviations"
            ]
        }
    },
    {
        "id": "fileNaming",
        "question": "What naming convention should be used for file names?",
        "answers": [
            {
                "value": "kebab-case",
                "label": "kebab-case",
                "example": "user-profile.tsx",
                "docs": "https://en.wikipedia.org/wiki/Letter_case#Kebab_case",
                "isDefault": true
            },
            {
                "value": "camelCase",
                "label": "camelCase",
                "example": "userProfile.tsx",
                "docs": "https://en.wikipedia.org/wiki/Camel_case"
            },
            {
                "value": "PascalCase",
                "label": "PascalCase",
                "example": "UserProfile.tsx",
                "docs": "https://en.wikipedia.org/wiki/PascalCase"
            },
            {
                "value": "snake_case",
                "label": "snake_case",
                "example": "user_profile.tsx",
                "docs": "https://en.wikipedia.org/wiki/Snake_case"
            }
        ],
        "freeText": {
            "enabled": true,
            "suggestions": [
                "Feature-based naming",
                "No spaces in filenames",
                "Match backend naming",
                "Use index files sparingly"
            ]
        }
    },
    {
        "id": "componentNaming",
        "question": "What naming convention should be used for component names?",
        "answers": [
            {
                "value": "PascalCase",
                "label": "PascalCase",
                "example": "export function LoginForm() {}",
                "docs": "https://en.wikipedia.org/wiki/PascalCase",
                "isDefault": true
            },
            {
                "value": "camelCase",
                "label": "camelCase",
                "example": "export function loginForm() {}",
                "docs": "https://en.wikipedia.org/wiki/Camel_case"
            }
        ],
        "freeText": {
            "enabled": true,
            "suggestions": [
                "PascalCase with suffix",
                "Domain-specific prefixes",
                "Export anonymous components",
                "Use Async prefix for lazy components"
            ]
        }
    },
    {
        "id": "exports",
        "question": "Do we prefer named or default exports?",
        "answers": [
            {
                "value": "named",
                "label": "Named exports",
                "example": "export const Button = () => {}",
                "docs": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#named_exports",
                "isDefault": true
            },
            {
                "value": "default",
                "label": "Default exports",
                "example": "export default function Button() {}",
                "docs": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#default_exports"
            }
        ],
        "freeText": {
            "enabled": true,
            "suggestions": [
                "Named exports everywhere",
                "Default exports for pages",
                "Prefer factory exports",
                "Export objects with namespaces"
            ]
        }
    },
    {
        "id": "comments",
        "question": "How should we handle comments and documentation?",
        "answers": [
            {
                "value": "minimal",
                "label": "Minimal comments",
                "example": "// Explain complex logic only",
                "isDefault": true
            },
            {
                "value": "jsdoc",
                "label": "JSDoc",
                "example": "/** Adds two numbers */",
                "docs": "https://jsdoc.app/about-getting-started.html"
            },
            {
                "value": "inline",
                "label": "Inline explanations",
                "example": "// Explain why, not what"
            }
        ],
        "freeText": {
            "enabled": true,
            "suggestions": [
                "Document intent over implementation",
                "Use JSDoc for public APIs",
                "Prefer ADRs for major changes",
                "No inline comments"
            ]
        }
    },
    {
        "id": "collaboration",
        "question": "What collaboration rules should we enforce?",
        "answers": [
            {
                "value": "smallPRs",
                "label": "Small PRs",
                "example": "Keep pull requests under 400 lines."
            },
            {
                "value": "reviewBeforeMerge",
                "label": "Require reviews before merging",
                "example": "At least one approval is mandatory.",
                "docs": "https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests",
                "isDefault": true
            },
            {
                "value": "docBeforeMerge",
                "label": "Documentation required",
                "example": "New APIs must be documented in /docs."
            }
        ],
        "freeText": {
            "enabled": true,
            "suggestions": [
                "Two approvals required",
                "Link Jira tickets in PRs",
                "Use feature branch naming",
                "Async standups in Slack"
            ]
        }
    }
]
