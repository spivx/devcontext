[
    {
        "id": "stateManagement",
        "question": "Which state management approach should be used?",
        "answers": [
            {
                "value": "reactQuery",
                "label": "React Query",
                "example": "Use React Query for server state management",
                "docs": "https://tanstack.com/query/latest/docs/react/overview",
                "isDefault": true
            },
            {
                "value": "reduxToolkit",
                "label": "Redux Toolkit",
                "example": "Use Redux Toolkit for app-wide state",
                "docs": "https://redux-toolkit.js.org/introduction/getting-started"
            }
        ],
        "freeText": {
            "enabled": true,
            "suggestions": [
                "Zustand",
                "MobX",
                "Recoil",
                "Context + reducers"
            ]
        }
    },
    {
        "id": "apiLayer",
        "question": "How should API calls be structured?",
        "answers": [
            {
                "value": "servicesFolder",
                "label": "Dedicated services folder",
                "example": "All API calls go into /src/services"
            },
            {
                "value": "hooks",
                "label": "Custom hooks",
                "example": "Encapsulate API calls in useFetchSomething()",
                "docs": "https://react.dev/learn/reusing-logic-with-custom-hooks",
                "isDefault": true
            }
        ],
        "freeText": {
            "enabled": true,
            "suggestions": [
                "GraphQL via Apollo",
                "REST helpers in /lib/api",
                "tRPC procedures",
                "Direct fetch in components"
            ]
        }
    },
    {
        "id": "folders",
        "question": "What folder structure rules should we follow?",
        "answers": [
            {
                "value": "featureFolders",
                "label": "Feature-based folders",
                "example": "src/features/auth/LoginForm.tsx",
                "isDefault": true
            },
            {
                "value": "domainDriven",
                "label": "Domain-driven folders",
                "example": "src/domain/order/components/OrderCard.tsx"
            }
        ],
        "freeText": {
            "enabled": true,
            "suggestions": [
                "Atomic design folders",
                "Keep /pages flat",
                "Use src/features only",
                "Layered architecture"
            ]
        }
    }
]
